name: Build UU-status (CSV + Details + Page)

on:
  schedule:
    - cron: "27 1 * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "requirements.txt"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build UU-status CSV + details
        run: |
          python scrape_uustatus.py

      - name: Copy files to docs (for GitHub Pages)
        run: |
          mkdir -p docs
          cp uu-status.csv docs/uu-status.csv
          cp uu-status-details.json docs/uu-status-details.json

      - name: Ensure archive folders & seed files
        run: |
          mkdir -p docs/data/uustatus/snapshots_by_updated
          mkdir -p docs/data/uustatus/snapshots
          mkdir -p docs/data/uustatus/logs
          [ -f docs/data/uustatus/latest.json ] || echo '{ "urls": [] }' > docs/data/uustatus/latest.json
          [ -f docs/data/uustatus/logs/changes.jsonl ] || : > docs/data/uustatus/logs/changes.jsonl

      - name: Debug current details for Avstemmingsinformasjon
        run: |
          python - <<'PY'
          import json
          from pathlib import Path
          KEY = "avstemmingsinformasjon"
          data = json.loads(Path("docs/uu-status-details.json").read_text(encoding="utf-8"))
          rows = data.get("urls") if isinstance(data, dict) else data
          hit = next((r for r in rows if KEY in (r.get("url","")+r.get("href","")).lower()), None)
          print("CUR FOUND:", bool(hit))
          if hit:
              def codes(obj):
                  for k in ["nonConformities","violations","wcag","issues","problems"]:
                      if k in obj:
                          v = obj[k]
                          if isinstance(v, str):
                              return [s.strip() for s in v.split(";") if s.strip()]
                          if isinstance(v, list):
                              out=[]
                              for it in v:
                                  if isinstance(it, str):
                                      out.append(it.strip())
                                  elif isinstance(it, dict):
                                      for kk in ["code","wcag","criterion","id","wcagId","wcag_id"]:
                                          if it.get(kk):
                                              out.append(str(it[kk]).strip()); break
                              return sorted(set(out))
                  return []
              c = codes(hit)
              t = hit.get("totalNonConformities")
              ua = hit.get("updatedAt")
              print("CUR updatedAt:", ua)
              print("CUR total:", t if t is not None else len(c))
              print("CUR codes:", c)
          PY

      - name: Debug latest.json timeline (HEAD..HEAD~12)
        run: |
          python - <<'PY'
          import subprocess, json
          KEY = "avstemmingsinformasjon"
          def codes(obj):
              for k in ["nonConformities","violations","wcag","issues","problems"]:
                  if k in obj:
                      v = obj[k]
                      if isinstance(v, str):
                          return [s.strip() for s in v.split(";") if s.strip()]
                      if isinstance(v, list):
                          out=[]
                          for it in v:
                              if isinstance(it, str):
                                  out.append(it.strip())
                              elif isinstance(it, dict):
                                  for kk in ["code","wcag","criterion","id","wcagId","wcag_id"]:
                                      if it.get(kk):
                                          out.append(str(it[kk]).strip()); break
                          return sorted(set(out))
              return []
          try:
              shas = subprocess.check_output(
                  ["git","rev-list","-n","12","HEAD","--","docs/data/uustatus/latest.json"], text=True
              ).strip().splitlines()
          except Exception:
              shas = []
          for sha in shas:
              try:
                  out = subprocess.check_output(["git","show",f"{sha}:docs/data/uustatus/latest.json"], text=True)
                  j = json.loads(out)
              except Exception:
                  continue
              rows = j.get("urls") if isinstance(j, dict) else j
              hit = next((r for r in rows if KEY in (r.get("url") or "").lower()), None)
              if hit:
                  cc = codes(hit)
                  tot = hit.get("totalNonConformities") or len(cc)
                  print(sha[:7], "total=", tot, "codes=", cc)
          PY

      - name: Sanity check of archive script
        run: |
          grep -n "AUTO_BACKTRACK" build_uu_archive.py || (echo "ERROR: build_uu_archive.py mangler AUTO_BACKTRACK-stÃ¸tte" && exit 1)

      - name: Build archive (diff & event snapshots)
        env:
          AUTO_BACKTRACK: "1"
          MAX_BACKTRACK: "20"
          DEBUG_URL_CONTAINS: "avstemm"
        run: |
          python build_uu_archive.py

      - name: Commit updated CSV, details and page (if changed)
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add uu-status.csv uu-status-details.json || true
          git add -A docs
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update UU-status + archive (csv, details, page, snapshots, changes)"
            git pull --rebase
            git push
          fi
